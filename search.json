[{"title":"art","path":"/2024/03/26/art/","content":"SPI机制的缺陷 通过上面的解析，可以发现，我们使用SPI机制的缺陷： 不能按需加载，需要遍历所有的实现，并实例化，然后在循环中才能找到我们需要的实现。如果不想用某些实现类，或者某些类实例化很耗时，它也被载入并实例化了，这就造成了浪费。 获取某个实现类的方式不够灵活，只能通过 Iterator 形式获取，不能根据某个参数来获取对应的实现类。 多个并发多线程使用 ServiceLoader 类的实例是不安全的。 当我把else注释掉，编译不会通过：The local variable response may not have been initializedJava(536870963) 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960import java.io.IOException;import java.io.InputStream;import java.io.OutputStream;import java.net.ServerSocket;import java.net.Socket;public class TestServer &#123; public static void main(String[] args) throws IOException &#123; ServerSocket serverSocket = new ServerSocket(9090); System.out.println(&quot;9090端口正在被监听...&quot;); while (true) &#123; Socket accept = serverSocket.accept(); System.out.println(&quot;客户端连接成功: &quot; + accept.getInetAddress()); // Read client&#x27;s request InputStream inputStream = accept.getInputStream(); byte[] requestBytes = new byte[1024]; int readLen = inputStream.read(requestBytes); String clientRequest = new String(requestBytes, 0, readLen); System.out.println(&quot;客户端请求内容: &quot; + clientRequest); // Extract the requested path from the request String[] requestLines = clientRequest.split(&quot;\\r &quot;); String[] requestLineParts = requestLines[0].split(&quot; &quot;); String path = requestLineParts[1]; // Handle the request based on the path String response; if (&quot;/login&quot;.equals(path)) &#123; response = &quot;HTTP/1.1 200 OK\\r \\r Welcome to the login page!&quot;; &#125; //当我把else注释掉，编译不会通过：The local variable response may not have been initializedJava(536870963) // else &#123; // response = &quot;HTTP/1.1 404 Not Found\\r \\r Page not found!&quot;; // &#125; // Send the response back to the client OutputStream outputStream = accept.getOutputStream(); outputStream.write(response.getBytes()); // Close the streams and socket inputStream.close(); outputStream.close(); accept.close(); &#125; &#125;&#125; 因为你把else注释掉，response就可能存在没有赋初始值的情况。 java语言规定局部变量必须显示初始化。全局变量保存在堆中，在创建对象时就必须确定变量的大小，所以jvm会初始化全局变量。而局部变量保存在方法栈中，编译器无法确定局部变量的大小，更好的选择是程序员手动进行初始化。 除了在使用局部变量之前手动赋一个初始值，也可以使用if else来确保局部变量在使用之前可以被初始化。这也就是为什么你有时候不手动给局部变量赋值也能使用，因为已经用条件语句确保它有值。就像上面的例子。","tags":["test"],"categories":["设计开发","iOS开发"]},{"title":"22","path":"/2024/03/26/22/","content":"一个小镇的姑娘到了大城市，你一定听过这故事~ It is possible to look at this unpromising starting point and conclude that Israel’s invasion of Gaza has not gone badly—and many Israelis take just that view. After all, The war in Gaza may topple Hamas without making Israel saferListen to this story. Enjoy more audio and podcasts on iOS or Android. “I wish i could say we have a very detailed plan,” an Israeli army officer admitted to your correspondent in the chaotic days following Hamas’s brutal assault on southern Israel on October 7th. More than 1,100 people had been killed; some 240 had been dragged back to Gaza as hostages. It was clear from the outset of the war in Gaza, now six months old, that Israel’s two main goals—to eliminate Hamas and to free the hostages—were at odds. It was also clear that invading the territory, in which 2.2m people live cheek by jowl and under which Hamas had built a labyrinth of fortified tunnels to help it withstand an attack, was going to be immensely difficult. And there was always the risk that war in Gaza would spiral into a bigger conflict. It is possible to look at this unpromising starting point and conclude that Israel’s invasion of Gaza has not gone badly—and many Israelis take just that view. After all, Hamas’s fighting capacity has been massively reduced, with little in the way of Israeli casualties. Some of the hostages have been released and negotiations continue in an attempt to free the remainder. And all the while, there has been no regional conflagration, nor even much unrest in the West Bank (the more populous of the two Palestinian territories) or among Israelis of Palestinian origin.","tags":["test"]},{"title":"cover","path":"/2024/03/25/cover/","content":"他常会向往能回到那年一十二，只需要好好山上学生活单纯没忧愁。 他笑着想过未来，他应该得到幸福~ The war in Gaza may topple Hamas without making Israel safer1&lt;!-- more --&gt; Listen to this story. Enjoy more audio and podcasts on iOS or Android. “I wish i could say we have a very detailed plan,” an Israeli army officer admitted to your correspondent in the chaotic days following Hamas’s brutal assault on southern Israel on October 7th. More than 1,100 people had been killed; some 240 had been dragged back to Gaza as hostages. It was clear from the outset of the war in Gaza, now six months old, that Israel’s two main goals—to eliminate Hamas and to free the hostages—were at odds. It was also clear that invading the territory, in which 2.2m people live cheek by jowl and under which Hamas had built a labyrinth of fortified tunnels to help it withstand an attack, was going to be immensely difficult. And there was always the risk that war in Gaza would spiral into a bigger conflict. It is possible to look at this unpromising starting point and conclude that Israel’s invasion of Gaza has not gone badly—and many Israelis take just that view. After all, Hamas’s fighting capacity has been massively reduced, with little in the way of Israeli casualties. Some of the hostages have been released and negotiations continue in an attempt to free the remainder. And all the while, there has been no regional conflagration, nor even much unrest in the West Bank (the more populous of the two Palestinian territories) or among Israelis of Palestinian origin.","tags":["test"]},{"title":"more-writings","path":"/2024/03/25/more-writings/","content":"这个排版不看好。主题的设置也没有哇。","tags":["test"]},{"title":"test","path":"/2024/03/25/test/","content":"[TOC] protected访问修饰符的范围？顺便回顾一下java的四种访问修饰符的权限： 修饰符 同一个类中 子孙类（同包） 子孙类（不同包） 其他包 修饰对象 备注 private ✅ ❎ ❎ ❎ 类，变量，方法 只允许在本类中访问 default ✅ ✅ ❎ ❎ 类，变量，方法 同包可以访问，不允许跨包（与protected对比） protected ✅ ✅ ✅&#x2F;❎ ❎ 变量，方法 覆盖default，只允许跨包的子类访问自身实例继承来的方法或者属性 public ✅ ✅ ✅ ✅ 类，变量，方法 覆盖default，允许跨包","tags":["测试一下"]},{"title":"Hello World","path":"/2024/03/25/hello-world/","content":"Welcome to Hexo! This is your very first post. Check documentation for more info. If you get any problems when using Hexo, you can find the answer in troubleshooting or you can ask me on GitHub. Quick StartCreate a new post1$ hexo new &quot;My New Post&quot; More info: Writing Run server1$ hexo server More info: Server Generate static files1$ hexo generate More info: Generating Deploy to remote sites1$ hexo deploy More info: Deployment"},{"title":"happy","path":"/2024/02/26/happy/","content":"小镇姑娘你曾是我的世界，不完整的世界。 二十二使用asset_img在文章中嵌入图片： Runaway好好说再见","tags":["java"]}]